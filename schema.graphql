# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  pontos: Int
  checkIns(where: CheckInWhereInput! = {}, orderBy: [CheckInOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CheckInWhereUniqueInput): [CheckIn!]
  checkInsCount(where: CheckInWhereInput! = {}): Int
  pontuacaoTotal: Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  pontos: IntNullableFilter
  checkIns: CheckInManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input CheckInManyRelationFilter {
  every: CheckInWhereInput
  some: CheckInWhereInput
  none: CheckInWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  pontos: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  pontos: Int
  checkIns: CheckInRelateToManyForUpdateInput
  createdAt: DateTime
}

input CheckInRelateToManyForUpdateInput {
  disconnect: [CheckInWhereUniqueInput!]
  set: [CheckInWhereUniqueInput!]
  create: [CheckInCreateInput!]
  connect: [CheckInWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  pontos: Int
  checkIns: CheckInRelateToManyForCreateInput
  createdAt: DateTime
}

input CheckInRelateToManyForCreateInput {
  create: [CheckInCreateInput!]
  connect: [CheckInWhereUniqueInput!]
}

type Events {
  id: ID!
  evento: String
  descricao: String
  horas: String
  data: DateTime
  local: String
  status: EventsStatusType
  responsavel: User
  createdAt: DateTime
}

enum EventsStatusType {
  agendado
  em_andamento
  concluido
  cancelado
}

input EventsWhereUniqueInput {
  id: ID
}

input EventsWhereInput {
  AND: [EventsWhereInput!]
  OR: [EventsWhereInput!]
  NOT: [EventsWhereInput!]
  id: IDFilter
  evento: StringFilter
  descricao: StringFilter
  horas: StringFilter
  data: DateTimeFilter
  local: StringFilter
  status: EventsStatusTypeNullableFilter
  responsavel: UserWhereInput
  createdAt: DateTimeNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input EventsStatusTypeNullableFilter {
  equals: EventsStatusType
  in: [EventsStatusType!]
  notIn: [EventsStatusType!]
  not: EventsStatusTypeNullableFilter
}

input EventsOrderByInput {
  id: OrderDirection
  evento: OrderDirection
  descricao: OrderDirection
  horas: OrderDirection
  data: OrderDirection
  local: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input EventsUpdateInput {
  evento: String
  descricao: String
  horas: String
  data: DateTime
  local: String
  status: EventsStatusType
  responsavel: UserRelateToOneForUpdateInput
  createdAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input EventsUpdateArgs {
  where: EventsWhereUniqueInput!
  data: EventsUpdateInput!
}

input EventsCreateInput {
  evento: String
  descricao: String
  horas: String
  data: DateTime
  local: String
  status: EventsStatusType
  responsavel: UserRelateToOneForCreateInput
  createdAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type CheckIn {
  id: ID!
  user: User
  ativacao: Ativacao
  pontosGanhos: Int
  local: String
  createdAt: DateTime
}

input CheckInWhereUniqueInput {
  id: ID
}

input CheckInWhereInput {
  AND: [CheckInWhereInput!]
  OR: [CheckInWhereInput!]
  NOT: [CheckInWhereInput!]
  id: IDFilter
  user: UserWhereInput
  ativacao: AtivacaoWhereInput
  pontosGanhos: IntFilter
  local: StringFilter
  createdAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input CheckInOrderByInput {
  id: OrderDirection
  pontosGanhos: OrderDirection
  local: OrderDirection
  createdAt: OrderDirection
}

input CheckInUpdateInput {
  user: UserRelateToOneForUpdateInput
  ativacao: AtivacaoRelateToOneForUpdateInput
  pontosGanhos: Int
  local: String
  createdAt: DateTime
}

input AtivacaoRelateToOneForUpdateInput {
  create: AtivacaoCreateInput
  connect: AtivacaoWhereUniqueInput
  disconnect: Boolean
}

input CheckInUpdateArgs {
  where: CheckInWhereUniqueInput!
  data: CheckInUpdateInput!
}

input CheckInCreateInput {
  user: UserRelateToOneForCreateInput
  ativacao: AtivacaoRelateToOneForCreateInput
  pontosGanhos: Int
  local: String
  createdAt: DateTime
}

input AtivacaoRelateToOneForCreateInput {
  create: AtivacaoCreateInput
  connect: AtivacaoWhereUniqueInput
}

type Ativacao {
  id: ID!
  nome: String
  pontuacao: Int
  uuid: String
  evento: Events
  checkIns(where: CheckInWhereInput! = {}, orderBy: [CheckInOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CheckInWhereUniqueInput): [CheckIn!]
  checkInsCount(where: CheckInWhereInput! = {}): Int
  ativa: String
  createdAt: DateTime
}

input AtivacaoWhereUniqueInput {
  id: ID
}

input AtivacaoWhereInput {
  AND: [AtivacaoWhereInput!]
  OR: [AtivacaoWhereInput!]
  NOT: [AtivacaoWhereInput!]
  id: IDFilter
  nome: StringFilter
  pontuacao: IntFilter
  uuid: StringFilter
  evento: EventsWhereInput
  checkIns: CheckInManyRelationFilter
  ativa: StringFilter
  createdAt: DateTimeFilter
}

input AtivacaoOrderByInput {
  id: OrderDirection
  nome: OrderDirection
  pontuacao: OrderDirection
  uuid: OrderDirection
  ativa: OrderDirection
  createdAt: OrderDirection
}

input AtivacaoUpdateInput {
  nome: String
  pontuacao: Int
  uuid: String
  evento: EventsRelateToOneForUpdateInput
  checkIns: CheckInRelateToManyForUpdateInput
  ativa: String
  createdAt: DateTime
}

input EventsRelateToOneForUpdateInput {
  create: EventsCreateInput
  connect: EventsWhereUniqueInput
  disconnect: Boolean
}

input AtivacaoUpdateArgs {
  where: AtivacaoWhereUniqueInput!
  data: AtivacaoUpdateInput!
}

input AtivacaoCreateInput {
  nome: String
  pontuacao: Int
  uuid: String
  evento: EventsRelateToOneForCreateInput
  checkIns: CheckInRelateToManyForCreateInput
  ativa: String
  createdAt: DateTime
}

input EventsRelateToOneForCreateInput {
  create: EventsCreateInput
  connect: EventsWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createEvents(data: EventsCreateInput!): Events
  createEventsList(data: [EventsCreateInput!]!): [Events]
  updateEvents(where: EventsWhereUniqueInput!, data: EventsUpdateInput!): Events
  updateEventsList(data: [EventsUpdateArgs!]!): [Events]
  deleteEvents(where: EventsWhereUniqueInput!): Events
  deleteEventsList(where: [EventsWhereUniqueInput!]!): [Events]
  createCheckIn(data: CheckInCreateInput!): CheckIn
  createCheckIns(data: [CheckInCreateInput!]!): [CheckIn]
  updateCheckIn(where: CheckInWhereUniqueInput!, data: CheckInUpdateInput!): CheckIn
  updateCheckIns(data: [CheckInUpdateArgs!]!): [CheckIn]
  deleteCheckIn(where: CheckInWhereUniqueInput!): CheckIn
  deleteCheckIns(where: [CheckInWhereUniqueInput!]!): [CheckIn]
  createAtivacao(data: AtivacaoCreateInput!): Ativacao
  createAtivacoes(data: [AtivacaoCreateInput!]!): [Ativacao]
  updateAtivacao(where: AtivacaoWhereUniqueInput!, data: AtivacaoUpdateInput!): Ativacao
  updateAtivacoes(data: [AtivacaoUpdateArgs!]!): [Ativacao]
  deleteAtivacao(where: AtivacaoWhereUniqueInput!): Ativacao
  deleteAtivacoes(where: [AtivacaoWhereUniqueInput!]!): [Ativacao]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  events(where: EventsWhereUniqueInput!): Events
  eventsList(where: EventsWhereInput! = {}, orderBy: [EventsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventsWhereUniqueInput): [Events!]
  eventsListCount(where: EventsWhereInput! = {}): Int
  checkIn(where: CheckInWhereUniqueInput!): CheckIn
  checkIns(where: CheckInWhereInput! = {}, orderBy: [CheckInOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CheckInWhereUniqueInput): [CheckIn!]
  checkInsCount(where: CheckInWhereInput! = {}): Int
  ativacao(where: AtivacaoWhereUniqueInput!): Ativacao
  ativacoes(where: AtivacaoWhereInput! = {}, orderBy: [AtivacaoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AtivacaoWhereUniqueInput): [Ativacao!]
  ativacoesCount(where: AtivacaoWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
